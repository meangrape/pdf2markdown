name: Release

on:
  push:
    branches: [ main ]
    paths:
      - 'pyproject.toml'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
      version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check if version changed
      id: version
      run: |
        # Get current version
        CURRENT_VERSION=$(grep -E "^version = " pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Current version: $CURRENT_VERSION"

        # Get previous version
        git checkout HEAD~1 pyproject.toml 2>/dev/null || echo "No previous version"
        PREVIOUS_VERSION=$(grep -E "^version = " pyproject.toml 2>/dev/null | sed 's/version = "\(.*\)"/\1/' || echo "0.0.0")

        # Restore current version
        git checkout HEAD pyproject.toml

        echo "Previous version: $PREVIOUS_VERSION"

        if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
          echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        else
          echo "Version unchanged"
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

  test:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: |
        uv pip install --system -e .[dev]

    - name: Run linter with auto-fix
      run: |
        ruff check --fix .

    - name: Run import sorting
      run: |
        isort .

    - name: Run type checking
      run: |
        mypy .

    - name: Run tests
      run: |
        pytest

  build-and-publish:
    needs: [check-version, test]
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install build dependencies
      run: |
        uv pip install --system build twine

    - name: Build package
      run: |
        uv build

    - name: Check package
      run: |
        twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.check-version.outputs.version }}
        release_name: Release v${{ needs.check-version.outputs.version }}
        body: |
          Release v${{ needs.check-version.outputs.version }}
          
          Install from PyPI:
          ```bash
          pip install pdf2markdown==${{ needs.check-version.outputs.version }}
          ```
        draft: false
        prerelease: false