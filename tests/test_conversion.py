# -*- coding: utf-8 -*-
from pathlib import Path
from typing import Generator

import pytest
from complex_pdf import create_complex_pdf, create_image
from simple_pdf import create_simple_pdf

from pdf2markdown.cli import convert


@pytest.fixture(scope="module")
def simple_pdf_path(
    tmp_path_factory: pytest.TempPathFactory,
) -> Generator[Path, None, None]:
    """Fixture to create a simple PDF in a temporary directory."""

    pdf_dir = tmp_path_factory.mktemp("simple_pdf_test")
    pdf = pdf_dir / "simple_document.pdf"
    create_simple_pdf(pdf)
    yield pdf


@pytest.fixture(scope="module")
def complex_pdf_path(
    tmp_path_factory: pytest.TempPathFactory,
) -> Generator[Path, None, None]:
    """Fixture to create a complex PDF and its dummy image in a temporary directory."""

    pdf_dir = tmp_path_factory.mktemp("complex_pdf_test")
    pdf = pdf_dir / "complex_document.pdf"
    image_path: Path = pdf_dir / "complex_image.png"

    # Create the dummy image
    image = create_image(filename=image_path)
    if not image:
        pytest.fail("Failed to create dummy image for complex PDF test.")

    # Create the complex PDF, passing the path to the dummy image
    create_complex_pdf(filename=pdf, _image=image)
    yield pdf


def test_simple_pdf(simple_pdf_path: Path) -> None:
    """
    Tests the conversion fidelity of a simple PDF to Markdown.
    It checks for the presence of key text snippets.
    """
    Path.mkdir(simple_pdf_path.parent / "markdown_output", exist_ok=True)
    output_dir = simple_pdf_path.parent / "markdown_output"
    markdown = output_dir / (simple_pdf_path.stem + ".md")

    convert(simple_pdf_path, markdown)

    assert markdown.exists()

    converted_md_content = markdown.read_text(encoding="utf-8")
    normalized_converted = [
        line.strip() for line in converted_md_content.splitlines() if line.strip()
    ]

    # Expected content snippets.
    expected_md_content_parts = [
        "# **A Simple PDF Document**",
        "This is a basic paragraph in a simple PDF.",
        "This paragraph includes **bold text** and *italic text* .",  # The conversion adds a space after the italic text
        "Here's a small list:",
        "- Item 1",
        "- Item 2",
    ]

    for expected_part in expected_md_content_parts:
        assert expected_part.strip() in normalized_converted, (
            f"Expected part '{expected_part}' not found in simple PDF conversion output."
        )


def test_complex_pdf(complex_pdf_path: Path) -> None:
    """
    Tests the conversion fidelity of a complex PDF to Markdown.
    It checks for the presence of key structural elements and content.
    """

    Path.mkdir(complex_pdf_path.parent / "markdown_output", exist_ok=True)
    output_dir = complex_pdf_path.parent / "markdown_output"
    markdown = output_dir / (complex_pdf_path.stem + ".md")

    convert(complex_pdf_path, markdown)

    assert markdown.exists()

    converted_md_content = markdown.read_text(encoding="utf-8")

    normalized_converted = [
        line.strip() for line in converted_md_content.splitlines() if line.strip()
    ]

    # For complex PDFs, an exact string match is usually too brittle.
    # We check for the presence of key headings, table structure, and text snippets.
    expected_elements = [
        "# **Complex PDF Document Example**",
        "This document demonstrates more advanced features of PDF generation using ReportLab.",
        "# **Image Example:**",
        "*A placeholder image demonstrating embedding.*",
        "# **Table Example:**",
        "| Header 1    | Header 2    | Header 3      | Header 4                |",
        "| Row 1 Col 1 | Row 1 Col 2 | Row 1 Col 3   | Row 1 Col 4             |",
        "| Row 3 Col 1 | Row 3 Col 2 | Row 3 Col 3 R | ow 3 Col 4 with more te |",  # Conversion drops "ex" at the end of "text"
        "This is content on the **second page**, demonstrating page breaks.",
        "We can continue with more elaborate layouts here, potentially mixing elements like images and tables",
        "freely across pages.",
        "Generated by ReportLab",
    ]

    for element in expected_elements:
        assert element.strip() in normalized_converted, (
            f"Expected element '{element}' not found in complex PDF conversion output."
        )


def test_csv(tmp_path_factory: pytest.TempPathFactory) -> None:
    """
    Tests batch conversion using a CSV file.
    """
    # Create directories
    pdf_dir = tmp_path_factory.mktemp("csv_test_pdfs")
    output_dir = tmp_path_factory.mktemp("csv_test_output")
    csv_dir = tmp_path_factory.mktemp("csv_test")

    # Create PDFs
    simple_pdf = pdf_dir / "simple.pdf"
    complex_pdf = pdf_dir / "complex.pdf"
    image_path = pdf_dir / "test_image.png"

    create_simple_pdf(simple_pdf)
    image = create_image(filename=image_path)
    if not image:
        pytest.fail("Failed to create image for CSV test")
    create_complex_pdf(filename=complex_pdf, _image=image)

    # Create CSV file with conversion pairs
    csv_file = csv_dir / "batch_convert.csv"
    simple_md = output_dir / "simple_from_csv.md"
    complex_md = output_dir / "complex_from_csv.md"

    csv_content = f"{simple_pdf}, {simple_md}\n{complex_pdf}, {complex_md}"
    csv_file.write_text(csv_content)

    # Run batch conversion
    convert(file=csv_file.as_posix())

    # Verify both files were created
    assert simple_md.exists(), "Simple PDF was not converted from CSV"
    assert complex_md.exists(), "Complex PDF was not converted from CSV"

    # Verify content of simple PDF conversion
    simple_content = simple_md.read_text(encoding="utf-8")
    simple_lines = [
        line.strip() for line in simple_content.splitlines() if line.strip()
    ]
    assert "# **A Simple PDF Document**" in simple_lines
    assert "This is a basic paragraph in a simple PDF." in simple_lines

    # Verify content of complex PDF conversion
    complex_content = complex_md.read_text(encoding="utf-8")
    complex_lines = [
        line.strip() for line in complex_content.splitlines() if line.strip()
    ]
    assert "# **Complex PDF Document Example**" in complex_lines
    assert "# **Table Example:**" in complex_lines
